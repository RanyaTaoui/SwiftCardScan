{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Info from \"./pages/info\";\nimport Acceuil from \"./pages/acceuil\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar App = function App() {\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Acceuil, {})\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default App;","map":{"version":3,"names":["React","StyleSheet","Text","View","Info","Acceuil","jsx","_jsx","App","style","styles","container","children","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["D:/pf/SwiftCardScan/App.js"],"sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport Info from './pages/info'; // Adjust the path based on your project structure\r\nimport Acceuil from './pages/acceuil';\r\n\r\nconst App = () => {\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* <Text>Welcome to My React Native App</Text> */}\r\n      <Acceuil /> \r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n\r\nexport default App;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//   View,\r\n//   Text,\r\n//   TouchableOpacity,\r\n//   Image,\r\n//   PermissionsAndroid,\r\n// } from 'react-native';\r\n// import ImagePicker from 'react-native-image-picker';\r\n// import OpenCV from 'react-native-opencv';\r\n\r\n// const App = () => {\r\n//   const [selectedImage, setSelectedImage] = useState(null);\r\n//   const [processedImage, setProcessedImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     processImage();\r\n//   }, [selectedImage]);\r\n\r\n//   const pickImage = async () => {\r\n//     try {\r\n//       const granted = await PermissionsAndroid.request(\r\n//         PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,\r\n//         {\r\n//           title: 'Permission Needed',\r\n//           message: 'This app needs permission to access your photos.',\r\n//         }\r\n//       );\r\n\r\n//       if (granted === PermissionsAndroid.RESULTS.GRANTED) {\r\n//         ImagePicker.showImagePicker(\r\n//           {\r\n//             title: 'Select Image',\r\n//             storageOptions: {\r\n//               skipBackup: true,\r\n//               path: 'images',\r\n//             },\r\n//           },\r\n//           (response) => {\r\n//             if (response.didCancel) {\r\n//               console.log('User cancelled image picker');\r\n//             } else if (response.error) {\r\n//               console.log('ImagePicker Error: ', response.error);\r\n//             } else {\r\n//               setSelectedImage({ uri: response.uri });\r\n//             }\r\n//           }\r\n//         );\r\n//       } else {\r\n//         console.log('Permission denied');\r\n//       }\r\n//     } catch (err) {\r\n//       console.warn(err);\r\n//     }\r\n//   };\r\n\r\n//   const processImage = async () => {\r\n//     try {\r\n//       if (!selectedImage) return;\r\n\r\n//       const imageUri = selectedImage.uri;\r\n\r\n//       // Charger l'image\r\n//       const { width, height } = await OpenCV.getImageSize(imageUri);\r\n//       const imageData = await OpenCV.imread(imageUri);\r\n\r\n//       // Convertir l'image en niveaux de gris\r\n//       const grayImageData = await OpenCV.cvtColor(imageData, OpenCV.COLOR_BGR2GRAY);\r\n\r\n//       // Appliquer un filtre de seuillage pour binariser l'image\r\n//       const binaryImageData = await OpenCV.threshold(grayImageData, 128, 255, OpenCV.THRESH_BINARY);\r\n\r\n//       // Sauvegarder l'image filtrée (format png)\r\n//       const processedImagePath = `${OpenCV.CachesDirectoryPath}/processed_image.png`;\r\n//       await OpenCV.imwrite(processedImagePath, binaryImageData);\r\n\r\n//       setProcessedImage({ uri: `file://${processedImagePath}`, width, height });\r\n//     } catch (error) {\r\n//       console.error('Erreur lors du traitement de l\\'image:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <View>\r\n//       <TouchableOpacity onPress={pickImage}>\r\n//         <Text>Sélectionner une image depuis la galerie</Text>\r\n//       </TouchableOpacity>\r\n\r\n//       {selectedImage && (\r\n//         <Image source={selectedImage} style={{ width: 200, height: 200 }} />\r\n//       )}\r\n\r\n//       {processedImage && (\r\n//         <Image source={processedImage} style={{ width: 200, height: 200 }} />\r\n//       )}\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAE1B,OAAOC,IAAI;AACX,OAAOC,OAAO;AAAwB,SAAAC,GAAA,IAAAC,IAAA;AAEtC,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,OACED,IAAA,CAACJ,IAAI;IAACM,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAE5BL,IAAA,CAACF,OAAO;EAAG,EACN;AAEX,CAAC;AAED,IAAMK,MAAM,GAAGT,UAAU,CAACY,MAAM,CAAC;EAC/BF,SAAS,EAAE;IACTG,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAeT,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}